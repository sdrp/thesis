TE_visualizer3(15000, 5000, 8800, cov_vec)
TE_visualizer3(15000, 5000, 8800, cov_vec)
TE_visualizer3(15000, 5000, 8800, cov_vec)
TE_visualizer3(15000, 5000, 8800, cov_vec)
TE_visualizer3(15000, 5000, 8800, cov_vec)
TE_visualizer3(15000, 5000, 8800, cov_vec)
TE_visualizer3(15000, 5000, 8800, cov_vec)
TE_visualizer3(15000, 5000, 8800, cov_vec)
TE_visualizer3(15000, 5000, 8800, cov_vec)
TE_visualizer3(15000, 5000, 8800, cov_vec)
TE_visualizer3(15000, 5000, 8800, cov_vec)
TE_visualizer3(15000, 5000, 8800, cov_vec)
TE_visualizer3(15000, 5000, 8800, cov_vec)
TE_visualizer3(15000, 5000, 8800, cov_vec)
TE_visualizer3(15000, 5000, 8800, cov_vec)
TE_visualizer3(15000, 5000, 8800, cov_vec)
TE_visualizer3(15000, 5000, 8800, cov_vec)
TE_visualizer3(15000, 5000, 8800, cov_vec)
TE_visualizer3(15000, 5000, 8800, cov_vec)
TE_visualizer3(15000, 5000, 8800, cov_vec)
TE_visualizer3(15000, 5000, 8800, cov_vec)
TE_visualizer3(15000, 5000, 8800, cov_vec)
TE_visualizer3(15000, 5000, 8800, cov_vec)
TE_visualizer3(15000, 5000, 8800, cov_vec)
TE_visualizer3(15000, 5000, 8800, cov_vec)
TE_visualizer3(15000, 5000, 8800, cov_vec)
TE_visualizer3(15000, 5000, 8800, cov_vec)
TE_visualizer3(15000, 5000, 8800, cov_vec)
TE_visualizer3(15000, 5000, 8800, cov_vec)
TE_visualizer3(15000, 5000, 8800, cov_vec)
TE_visualizer3(15000, 5000, 8800, cov_vec)
TE_visualizer3(15000, 5000, 8800, cov_vec)
TE_visualizer3(15000, 5000, 8800, cov_vec)
TE_visualizer3(15000, 5000, 8800, cov_vec)
TE_visualizer3(15000, 5000, 8800, cov_vec)
TE_visualizer3(15000, 5000, 8800, cov_vec)
TE_visualizer3(15000, 5000, 8800, cov_vec)
TE_visualizer3(15000, 5000, 8800, cov_vec)
source('~/Desktop/Neretti Lab Work/TE_visualizer3.R')
source('~/Desktop/Neretti Lab Work/TE_visualizer3.R')
TE_visualizer3(15000, 5000, 8800, cov_vec)
TE_visualizer3(15000, 5000, 8800, cov_vec)
TE_visualizer3(15000, 5000, 8800, cov_vec)
TE_visualizer3(15000, 5000, 8800, cov_vec)
source('~/Desktop/Neretti Lab Work/TE_visualizer3.R')
TE_visualizer3(15000, 5000, 8800, cov_vec)
TE_visualizer3(15000, 5000, 8800, cov_vec)
source('~/Desktop/Neretti Lab Work/TE_visualizer3.R')
TE_visualizer3(15000, 5000, 8800, cov_vec)
TE_visualizer3(15000, 5000, 8800, cov_vec)
TE_visualizer3(15000, 5000, 8800, cov_vec)
source('~/Desktop/Neretti Lab Work/TE_visualizer3.R')
source('~/Desktop/Neretti Lab Work/TE_visualizer3.R')
TE_visualizer3(15000, 5000, 8800, cov_vec)
TE_visualizer3(15000, 5000, 8800, cov_vec)
TE_visualizer3(15000, 5000, 8800, cov_vec)
source('~/Desktop/Neretti Lab Work/TE_visualizer3.R')
source('~/Desktop/Neretti Lab Work/TE_visualizer3.R')
TE_visualizer2(15000, 5000, 8800, cov_vec)
TE_visualizer2(15000, 5000, 8800, cov_vec)
TE_visualizer2(15000, 5000, 8800, cov_vec)
source('~/Desktop/Neretti Lab Work/TE_visualizer3.R')
TE_visualizer2(15000, 5000, 8800, cov_vec)
TE_visualizer2(15000, 5000, 8800, cov_vec)
source('~/Desktop/Neretti Lab Work/TE_visualizer2.R')
source('~/Desktop/Neretti Lab Work/TE_visualizer2.R')
source('~/Desktop/Neretti Lab Work/TE_visualizer2.R')
source('~/Desktop/Neretti Lab Work/TE_visualizer2.R')
source('~/Desktop/Neretti Lab Work/TE_visualizer3.R')
source('~/Desktop/Neretti Lab Work/TE_visualizer3.R')
source('~/Desktop/Neretti Lab Work/TE_visualizer3.R')
TE_visualizer2(15000, 5000, 8800, cov_vec)
TE_visualizer2(15000, 5000, 8800, cov_vec)
TE_visualizer2(15000, 5000, 8800, cov_vec)
TE_visualizer3(15000, 5000, 8800, cov_vec)
TE_visualizer3(15000, 5000, 8800, cov_vec)
TE_visualizer3(15000, 5000, 8800, cov_vec)
source('~/Desktop/Neretti Lab Work/TE_visualizer3.R')
source('~/Desktop/Neretti Lab Work/TE_visualizer3.R')
source('~/Desktop/Neretti Lab Work/TE_visualizer3.R')
TE_visualizer3(15000, 5000, 8800, cov_vec)
source('~/Desktop/Neretti Lab Work/TE_visualizer3.R')
source('~/Desktop/Neretti Lab Work/TE_visualizer3.R')
source('~/Desktop/Neretti Lab Work/TE_visualizer3.R')
source('~/Desktop/Neretti Lab Work/TE_visualizer3.R')
source('~/Desktop/Neretti Lab Work/TE_visualizer3.R')
cov_vec=c(1, 8, 3, 4, 5)
TE_visualizer3(15000, 5000, 8800, cov_vec)
source('~/Desktop/Neretti Lab Work/TE_visualizer3.R')
TE_visualizer3(15000, 5000, 8800, cov_vec)
TE_visualizer3(15000, 5000, 8800, cov_vec)
TE_visualizer3(15000, 5000, 8800, cov_vec)
TE_visualizer2(15000, 5000, 8800, cov_vec)
data(CO2
data(CO2)
View(mydata)
data(CO2)
data(CO2)
data("CO2")
data('CO2')
data('CO2')
d <- data('CO2')
head(CO2)
View(CO2)
View(CO2)
View(CO2)
View(CO2)
data(CO2)
head(CO2)
View(CO2)
View(CO2)
x =
5
x
snglonton_splits = 'fools'
snglonton_splits
snglotnon_splits
snglonton_splits^2
5^2
install.packages("googlesheets")
ggplot2
ToothGrowth$dose <- as.factor(ToothGrowth$dose)
head(ToothGrowth)
ggplot(ToothGrowth, aes(x=dose, y=len, color=supp)) +
geom_jitter(position=position_jitter(0.2))
ggplot2(ToothGrowth, aes(x=dose, y=len, color=supp)) +
geom_jitter(position=position_jitter(0.2))
library(ggplot2)
ggplot2(ToothGrowth, aes(x=dose, y=len, color=supp)) +
geom_jitter(position=position_jitter(0.2))
ggplot(ToothGrowth, aes(x=dose, y=len, color=supp)) +
geom_jitter(position=position_jitter(0.2))
install.packages("ggplot2")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
# Visualize Tractus Results
library(ggplot2)
TractusResults <- read.table(file = 'output_file_experiment.tsv', sep = '\t', header = TRUE)
TractusResults$Expression.Level <- as.factor(TractusResults$Expression.Level)
TractusResults$Predicted.Expression.Level <- as.factor(TractusResults$Predicted.Expression.Level)
p <- ggplot(TractusResults, aes(x=Expression.Level, y=Expression.Value, color=Predicted.Expression.Level)) +
geom_jitter(position=position_jitter(0.2))
p + scale_color_brewer(palette="Dark2")
library(ggplot2)
TractusResults <- read.table(file = 'output_file_experiment.tsv', sep = '\t', header = TRUE)
TractusResults$Expression.Level <- as.factor(TractusResults$Expression.Level)
TractusResults$Predicted.Expression.Level <- as.factor(TractusResults$Predicted.Expression.Level)
p <- ggplot(TractusResults, aes(x=Expression.Level, y=Expression.Value, color=Predicted.Expression.Level)) +
geom_jitter(position=position_jitter(0.2))
p + scale_color_brewer(palette="Dark2")
source('~/Documents/Brown/Senior Year/thesis/code/vis_tractus_results.r')
setwd("~/Documents/Brown/Senior Year/thesis/code")
library(ggplot2)
TractusResults <- read.table(file = 'output_file_experiment.tsv', sep = '\t', header = TRUE)
TractusResults$Expression.Level <- as.factor(TractusResults$Expression.Level)
TractusResults$Predicted.Expression.Level <- as.factor(TractusResults$Predicted.Expression.Level)
p <- ggplot(TractusResults, aes(x=Expression.Level, y=Expression.Value, color=Predicted.Expression.Level)) +
geom_jitter(position=position_jitter(0.2))
p + scale_color_brewer(palette="Dark2")
# Visualize Tractus Results
library(ggplot2)
TractusResults <- read.table(file = 'output_file_gaussian.tsv', sep = '\t', header = TRUE)
TractusResults$Expression.Level <- as.factor(TractusResults$Expression.Level)
TractusResults$Predicted.Expression.Level <- as.factor(TractusResults$Predicted.Expression.Level)
p <- ggplot(TractusResults, aes(x=Expression.Level, y=Expression.Value, color=Predicted.Expression.Level)) +
geom_jitter(position=position_jitter(0.2))
p + scale_color_brewer(palette="Dark2")
# Visualize Tractus Results
library(ggplot2)
TractusResults <- read.table(file = 'output_file_gaussian.tsv', sep = '\t', header = TRUE)
TractusResults$Expression.Level <- as.factor(TractusResults$Expression.Level)
TractusResults$Predicted.Expression.Level <- as.factor(TractusResults$Predicted.Expression.Level)
p <- ggplot(TractusResults, aes(x=Expression.Level, y=Expression.Value, color=Predicted.Expression.Level)) +
geom_jitter(position=position_jitter(0.2))
p + scale_color_brewer(palette="Dark2")
# Visualize Tractus Results
library(ggplot2)
TractusResults <- read.table(file = 'output_file_experiment.tsv', sep = '\t', header = TRUE)
TractusResults$Expression.Level <- as.factor(TractusResults$Expression.Level)
TractusResults$Predicted.Expression.Level <- as.factor(TractusResults$Predicted.Expression.Level)
p <- ggplot(TractusResults, aes(x=Expression.Level, y=Expression.Value, color=Predicted.Expression.Level)) +
geom_jitter(position=position_jitter(0.2))
p + scale_color_brewer(palette="Dark2")
# Visualize Tractus Results
library(ggplot2)
TractusResults <- read.table(file = 'output_file.tsv', sep = '\t', header = TRUE)
TractusResults$Expression.Level <- as.factor(TractusResults$Expression.Level)
TractusResults$Predicted.Expression.Level <- as.factor(TractusResults$Predicted.Expression.Level)
p <- ggplot(TractusResults, aes(x=Expression.Level, y=Expression.Value, color=Predicted.Expression.Level)) +
geom_jitter(position=position_jitter(0.2))
p + scale_color_brewer(palette="Dark2")
# Visualize Tractus Results
library(ggplot2)
TractusResults <- read.table(file = 'tract_dep_results.tsv', sep = '\t', header = TRUE)
TractusResults$Expression.Level <- as.factor(TractusResults$Expression.Level)
TractusResults$Predicted.Expression.Level <- as.factor(TractusResults$Predicted.Expression.Level)
p <- ggplot(TractusResults, aes(x=Expression.Level, y=Expression.Value, color=Predicted.Expression.Level)) +
geom_jitter(position=position_jitter(0.2))
p + scale_color_brewer(palette="Dark2")
# Visualize Tractus Results
library(ggplot2)
TractusResults <- read.table(file = 'output_file.tsv', sep = '\t', header = TRUE)
TractusResults$Expression.Level <- as.factor(TractusResults$Expression.Level)
TractusResults$Predicted.Expression.Level <- as.factor(TractusResults$Predicted.Expression.Level)
p <- ggplot(TractusResults, aes(x=Expression.Level, y=Expression.Value, color=Predicted.Expression.Level)) +
geom_jitter(position=position_jitter(0.2))
p + scale_color_brewer(palette="Dark2")
TractusResults <- read.table(file = 'tract_dep_results.tsv', sep = '\t', header = TRUE)
# Visualize Tractus Results
library(ggplot2)
TractusResults <- read.table(file = 'tract_dep_results.tsv', sep = '\t', header = TRUE)
TractusResults$Expression.Level <- as.factor(TractusResults$Expression.Level)
TractusResults$Predicted.Expression.Level <- as.factor(TractusResults$Predicted.Expression.Level)
p <- ggplot(TractusResults, aes(x=Expression.Level, y=Expression.Value, color=Predicted.Expression.Level)) +
geom_jitter(position=position_jitter(0.2))
p + scale_color_brewer(palette="Dark2")
# Visualize Tractus Results
library(ggplot2)
TractusResults <- read.table(file = 'tract_dep_results.tsv', sep = '\t', header = TRUE)
TractusResults$Expression.Level <- as.factor(TractusResults$Expression.Level)
TractusResults$Predicted.Expression.Level <- as.factor(TractusResults$Predicted.Expression.Level)
p <- ggplot(TractusResults, aes(x=Expression.Level, y=Expression.Value, color=Predicted.Expression.Level)) +
geom_jitter(position=position_jitter(0.2))
p + scale_color_brewer(palette="Dark2")
# Visualize Tractus Results
library(ggplot2)
TractusResults <- read.table(file = 'tract_dep_results.tsv', sep = '\t', header = TRUE)
TractusResults$Expression.Level <- as.factor(TractusResults$Expression.Level)
TractusResults$Predicted.Expression.Level <- as.factor(TractusResults$Predicted.Expression.Level)
p <- ggplot(TractusResults, aes(x=Expression.Level, y=Expression.Value, color=Predicted.Expression.Level)) +
geom_jitter(position=position_jitter(0.2))
p + scale_color_brewer(palette="Dark2")
# Visualize Tractus Results
library(ggplot2)
TractusResults <- read.table(file = 'tract_dep_results.tsv', sep = '\t', header = TRUE)
TractusResults$Expression.Level <- as.factor(TractusResults$Expression.Level)
TractusResults$Predicted.Expression.Level <- as.factor(TractusResults$Predicted.Expression.Level)
p <- ggplot(TractusResults, aes(x=Expression.Level, y=Expression.Value, color=Predicted.Expression.Level)) +
geom_jitter(position=position_jitter(0.2))
p + scale_color_brewer(palette="Dark2")
# Visualize Tractus Results
library(ggplot2)
TractusResults <- read.table(file = 'tract_dep_results.tsv', sep = '\t', header = TRUE)
TractusResults$Expression.Level <- as.factor(TractusResults$Expression.Level)
TractusResults$Predicted.Expression.Level <- as.factor(TractusResults$Predicted.Expression.Level)
#p <- ggplot(TractusResults, aes(x=Expression.Level, y=Expression.Value, color=Predicted.Expression.Level)) +
#    geom_jitter(position=position_jitter(0.2))
p <- ggplot(TractusResults, aes(x=Expression.Level, y=Expression.Value, color=Predicted.Expression.Level)) +
geom_jitter(position=position_dodge(0.8))
# Change the color scheme
p + scale_color_brewer(palette="Dark2")
# Visualize Tractus Results
library(ggplot2)
TractusResults <- read.table(file = 'tract_dep_results.tsv', sep = '\t', header = TRUE)
TractusResults$Expression.Level <- as.factor(TractusResults$Expression.Level)
TractusResults$Predicted.Expression.Level <- as.factor(TractusResults$Predicted.Expression.Level)
# Set the plot mode to "jitter" - more aesthetically pleasing, less clear
#p <- ggplot(TractusResults, aes(x=Expression.Level, y=Expression.Value, color=Predicted.Expression.Level)) +
#    geom_jitter(position=position_jitter(0.2))
# Set the plot mode to "dodge" - clear
p <- ggplot(TractusResults, aes(x=Expression.Level, y=Expression.Value, color=Predicted.Expression.Level)) +
geom_jitter(position=position_dodge(0.8))
# Change the color scheme
p + scale_color_brewer(palette="Dark2")
# Visualize Tractus Results
library(ggplot2)
TractusResults <- read.table(file = 'tract_dep_results.tsv', sep = '\t', header = TRUE)
TractusResults$Expression.Level <- as.factor(TractusResults$Expression.Level)
TractusResults$Predicted.Expression.Level <- as.factor(TractusResults$Predicted.Expression.Level)
# Set the plot mode to "jitter" - more aesthetically pleasing, less clear
#p <- ggplot(TractusResults, aes(x=Expression.Level, y=Expression.Value, color=Predicted.Expression.Level)) +
#    geom_jitter(position=position_jitter(0.2))
# Set the plot mode to "dodge" - clear
p <- ggplot(TractusResults, aes(x=Expression.Level, y=Expression.Value, color=Predicted.Expression.Level)) +
geom_jitter(position=position_dodge(0.8))
# Change the color scheme
p + scale_color_brewer(palette="Dark2")
# Visualize Tractus Results
library(ggplot2)
TractusResults <- read.table(file = 'tract_dep_results.tsv', sep = '\t', header = TRUE)
TractusResults$Expression.Level <- as.factor(TractusResults$Expression.Level)
TractusResults$Predicted.Expression.Level <- as.factor(TractusResults$Predicted.Expression.Level)
# Set the plot mode to "jitter" - more aesthetically pleasing, less clear
#p <- ggplot(TractusResults, aes(x=Expression.Level, y=Expression.Value, color=Predicted.Expression.Level)) +
#    geom_jitter(position=position_jitter(0.2))
# Set the plot mode to "dodge" - clear
p <- ggplot(TractusResults, aes(x=Expression.Level, y=Expression.Value, color=Predicted.Expression.Level)) +
geom_jitter(position=position_dodge(0.8))
# Change the color scheme
p + scale_color_brewer(palette="Dark2")
# Visualize Tractus Results
library(ggplot2)
TractusResults <- read.table(file = 'tract_dep_results.tsv', sep = '\t', header = TRUE)
TractusResults$Expression.Level <- as.factor(TractusResults$Expression.Level)
TractusResults$Predicted.Expression.Level <- as.factor(TractusResults$Predicted.Expression.Level)
# Set the plot mode to "jitter" - more aesthetically pleasing, less clear
p <- ggplot(TractusResults, aes(x=Expression.Level, y=Expression.Value, color=Predicted.Expression.Level)) +
geom_jitter(position=position_jitter(0.2))
# Set the plot mode to "dodge" - clear
#p <- ggplot(TractusResults, aes(x=Expression.Level, y=Expression.Value, color=Predicted.Expression.Level)) +
#    geom_jitter(position=position_dodge(0.8))
# Change the color scheme
p + scale_color_brewer(palette="Dark2")
# Visualize Tractus Results
library(ggplot2)
TractusResults <- read.table(file = 'tract_dep_results.tsv', sep = '\t', header = TRUE)
TractusResults$Expression.Level <- as.factor(TractusResults$Expression.Level)
TractusResults$Predicted.Expression.Level <- as.factor(TractusResults$Predicted.Expression.Level)
# Set the plot mode to "jitter" - more aesthetically pleasing, less clear
p <- ggplot(TractusResults, aes(x=Expression.Level, y=Expression.Value, color=Predicted.Expression.Level)) +
geom_jitter(position=position_jitter(0.2))
# Set the plot mode to "dodge" - clear
#p <- ggplot(TractusResults, aes(x=Expression.Level, y=Expression.Value, color=Predicted.Expression.Level)) +
#    geom_jitter(position=position_dodge(0.8))
# Change the color scheme
p + scale_color_brewer(palette="Dark2")
# Visualize Tractus Results
library(ggplot2)
TractusResults <- read.table(file = 'tract_dep_results.tsv', sep = '\t', header = TRUE)
TractusResults$Expression.Level <- as.factor(TractusResults$Expression.Level)
TractusResults$Predicted.Expression.Level <- as.factor(TractusResults$Predicted.Expression.Level)
# Set the plot mode to "jitter" - more aesthetically pleasing, less clear
p <- ggplot(TractusResults, aes(x=Expression.Level, y=Expression.Value, color=Predicted.Expression.Level)) +
geom_jitter(position=position_jitter(0.2))
# Set the plot mode to "dodge" - clear
#p <- ggplot(TractusResults, aes(x=Expression.Level, y=Expression.Value, color=Predicted.Expression.Level)) +
#    geom_jitter(position=position_dodge(0.8))
# Change the color scheme
p + scale_color_brewer(palette="Dark2")
# Visualize Tractus Results
library(ggplot2)
TractusResults <- read.table(file = 'tract_dep_results.tsv', sep = '\t', header = TRUE)
TractusResults$Expression.Level <- as.factor(TractusResults$Expression.Level)
TractusResults$Predicted.Expression.Level <- as.factor(TractusResults$Predicted.Expression.Level)
# Set the plot mode to "jitter" - more aesthetically pleasing, less clear
p <- ggplot(TractusResults, aes(x=Expression.Level, y=Expression.Value, color=Predicted.Expression.Level)) +
geom_jitter(position=position_jitter(0.2))
# Set the plot mode to "dodge" - clear
#p <- ggplot(TractusResults, aes(x=Expression.Level, y=Expression.Value, color=Predicted.Expression.Level)) +
#    geom_jitter(position=position_dodge(0.8))
# Change the color scheme
p + scale_color_brewer(palette="Dark2")
# Visualize Tractus Results
library(ggplot2)
TractusResults <- read.table(file = 'tract_dep_results.tsv', sep = '\t', header = TRUE)
TractusResults$Expression.Level <- as.factor(TractusResults$Expression.Level)
TractusResults$Predicted.Expression.Level <- as.factor(TractusResults$Predicted.Expression.Level)
# Set the plot mode to "jitter" - more aesthetically pleasing, less clear
p <- ggplot(TractusResults, aes(x=Expression.Level, y=Expression.Value, color=Predicted.Expression.Level)) +
geom_jitter(position=position_jitter(0.2))
# Set the plot mode to "dodge" - clear
#p <- ggplot(TractusResults, aes(x=Expression.Level, y=Expression.Value, color=Predicted.Expression.Level)) +
#    geom_jitter(position=position_dodge(0.8))
# Change the color scheme
p + scale_color_brewer(palette="Dark2")
# Visualize Tractus Results
library(ggplot2)
TractusResults <- read.table(file = 'tract_dep_results.tsv', sep = '\t', header = TRUE)
TractusResults$Expression.Level <- as.factor(TractusResults$Expression.Level)
TractusResults$Predicted.Expression.Level <- as.factor(TractusResults$Predicted.Expression.Level)
# Set the plot mode to "jitter" - more aesthetically pleasing, less clear
p <- ggplot(TractusResults, aes(x=Expression.Level, y=Expression.Value, color=Predicted.Expression.Level)) +
geom_jitter(position=position_jitter(0.2))
# Set the plot mode to "dodge" - clear
#p <- ggplot(TractusResults, aes(x=Expression.Level, y=Expression.Value, color=Predicted.Expression.Level)) +
#    geom_jitter(position=position_dodge(0.8))
# Change the color scheme
p + scale_color_brewer(palette="Dark2")
# Visualize Tractus Results
library(ggplot2)
TractusResults <- read.table(file = 'tract_dep_results.tsv', sep = '\t', header = TRUE)
TractusResults$Expression.Level <- as.factor(TractusResults$Expression.Level)
TractusResults$Predicted.Expression.Level <- as.factor(TractusResults$Predicted.Expression.Level)
# Set the plot mode to "jitter" - more aesthetically pleasing, less clear
p <- ggplot(TractusResults, aes(x=Expression.Level, y=Expression.Value, color=Predicted.Expression.Level)) +
geom_jitter(position=position_jitter(0.2))
# Set the plot mode to "dodge" - clear
#p <- ggplot(TractusResults, aes(x=Expression.Level, y=Expression.Value, color=Predicted.Expression.Level)) +
#    geom_jitter(position=position_dodge(0.8))
# Change the color scheme
p + scale_color_brewer(palette="Dark2")
# Visualize Tractus Results
library(ggplot2)
TractusResults <- read.table(file = 'tract_dep_results.tsv', sep = '\t', header = TRUE)
TractusResults$Expression.Level <- as.factor(TractusResults$Expression.Level)
TractusResults$Predicted.Expression.Level <- as.factor(TractusResults$Predicted.Expression.Level)
# Set the plot mode to "jitter" - more aesthetically pleasing, less clear
p <- ggplot(TractusResults, aes(x=Expression.Level, y=Expression.Value, color=Predicted.Expression.Level)) +
geom_jitter(position=position_jitter(0.2))
# Set the plot mode to "dodge" - clear
#p <- ggplot(TractusResults, aes(x=Expression.Level, y=Expression.Value, color=Predicted.Expression.Level)) +
#    geom_jitter(position=position_dodge(0.8))
# Change the color scheme
p + scale_color_brewer(palette="Dark2")
# Visualize Tractus Results
library(ggplot2)
TractusResults <- read.table(file = 'tract_dep_results.tsv', sep = '\t', header = TRUE)
TractusResults$Expression.Level <- as.factor(TractusResults$Expression.Level)
TractusResults$Predicted.Expression.Level <- as.factor(TractusResults$Predicted.Expression.Level)
# Set the plot mode to "jitter" - more aesthetically pleasing, less clear
p <- ggplot(TractusResults, aes(x=Expression.Level, y=Expression.Value, color=Predicted.Expression.Level)) +
geom_jitter(position=position_jitter(0.2))
# Set the plot mode to "dodge" - clear
#p <- ggplot(TractusResults, aes(x=Expression.Level, y=Expression.Value, color=Predicted.Expression.Level)) +
#    geom_jitter(position=position_dodge(0.8))
# Change the color scheme
p + scale_color_brewer(palette="Dark2")
p <- ggplot(TractusResults, aes(x=Expression.Level, y=Expression.Value, color=Predicted.Expression.Level)) +
geom_jitter(position=position_dodge(0.8))
# Visualize Tractus Results
library(ggplot2)
TractusResults <- read.table(file = 'tract_dep_results.tsv', sep = '\t', header = TRUE)
TractusResults$Expression.Level <- as.factor(TractusResults$Expression.Level)
TractusResults$Predicted.Expression.Level <- as.factor(TractusResults$Predicted.Expression.Level)
# Set the plot mode to "jitter" - more aesthetically pleasing, less clear
#p <- ggplot(TractusResults, aes(x=Expression.Level, y=Expression.Value, color=Predicted.Expression.Level)) +
#    geom_jitter(position=position_jitter(0.2))
# Set the plot mode to "dodge" - clear
p <- ggplot(TractusResults, aes(x=Expression.Level, y=Expression.Value, color=Predicted.Expression.Level)) +
geom_jitter(position=position_dodge(0.8))
# Change the color scheme
p + scale_color_brewer(palette="Dark2")
# Visualize Tractus Results
library(ggplot2)
TractusResults <- read.table(file = 'tract_dep_results.tsv', sep = '\t', header = TRUE)
TractusResults$Expression.Level <- as.factor(TractusResults$Expression.Level)
TractusResults$Predicted.Expression.Level <- as.factor(TractusResults$Predicted.Expression.Level)
# Set the plot mode to "jitter" - more aesthetically pleasing, less clear
p <- ggplot(TractusResults, aes(x=Expression.Level, y=Expression.Value, color=Predicted.Expression.Level)) +
geom_jitter(position=position_jitter(0.2))
# Set the plot mode to "dodge" - clear
#p <- ggplot(TractusResults, aes(x=Expression.Level, y=Expression.Value, color=Predicted.Expression.Level)) +
#    geom_jitter(position=position_dodge(0.8))
# Change the color scheme
p + scale_color_brewer(palette="Dark2")
# Visualize Tractus Results
library(ggplot2)
TractusResults <- read.table(file = 'tract_dep_results.tsv', sep = '\t', header = TRUE)
TractusResults$Expression.Level <- as.factor(TractusResults$Expression.Level)
TractusResults$Predicted.Expression.Level <- as.factor(TractusResults$Predicted.Expression.Level)
# Set the plot mode to "jitter" - more aesthetically pleasing, less clear
p <- ggplot(TractusResults, aes(x=Expression.Level, y=Expression.Value, color=Predicted.Expression.Level)) +
geom_jitter(position=position_jitter(0.2))
# Set the plot mode to "dodge" - clear
#p <- ggplot(TractusResults, aes(x=Expression.Level, y=Expression.Value, color=Predicted.Expression.Level)) +
#    geom_jitter(position=position_dodge(0.8))
# Change the color scheme
p + scale_color_brewer(palette="Dark2")
# Visualize Tractus Results
library(ggplot2)
TractusResults <- read.table(file = 'tract_dep_results.tsv', sep = '\t', header = TRUE)
TractusResults$Expression.Level <- as.factor(TractusResults$Expression.Level)
TractusResults$Predicted.Expression.Level <- as.factor(TractusResults$Predicted.Expression.Level)
# Set the plot mode to "jitter" - more aesthetically pleasing, less clear
p <- ggplot(TractusResults, aes(x=Expression.Level, y=Expression.Value, color=Predicted.Expression.Level)) +
geom_jitter(position=position_jitter(0.2))
# Set the plot mode to "dodge" - clear
#p <- ggplot(TractusResults, aes(x=Expression.Level, y=Expression.Value, color=Predicted.Expression.Level)) +
#    geom_jitter(position=position_dodge(0.8))
# Change the color scheme
p + scale_color_brewer(palette="Dark2")
# Visualize Tractus Results
library(ggplot2)
TractusResults <- read.table(file = 'tract_dep_results.tsv', sep = '\t', header = TRUE)
TractusResults$Expression.Level <- as.factor(TractusResults$Expression.Level)
TractusResults$Predicted.Expression.Level <- as.factor(TractusResults$Predicted.Expression.Level)
# Set the plot mode to "jitter" - more aesthetically pleasing, less clear
p <- ggplot(TractusResults, aes(x=Expression.Level, y=Expression.Value, color=Predicted.Expression.Level)) +
geom_jitter(position=position_jitter(0.2))
# Set the plot mode to "dodge" - clear
#p <- ggplot(TractusResults, aes(x=Expression.Level, y=Expression.Value, color=Predicted.Expression.Level)) +
#    geom_jitter(position=position_dodge(0.8))
# Change the color scheme
p + scale_color_brewer(palette="Dark2")
# Visualize Tractus Results
library(ggplot2)
TractusResults <- read.table(file = 'tract_dep_results.tsv', sep = '\t', header = TRUE)
TractusResults$Expression.Level <- as.factor(TractusResults$Expression.Level)
TractusResults$Predicted.Expression.Level <- as.factor(TractusResults$Predicted.Expression.Level)
# Set the plot mode to "jitter" - more aesthetically pleasing, less clear
p <- ggplot(TractusResults, aes(x=Expression.Level, y=Expression.Value, color=Predicted.Expression.Level)) +
geom_jitter(position=position_jitter(0.2))
# Set the plot mode to "dodge" - clear
#p <- ggplot(TractusResults, aes(x=Expression.Level, y=Expression.Value, color=Predicted.Expression.Level)) +
#    geom_jitter(position=position_dodge(0.8))
# Change the color scheme
p + scale_color_brewer(palette="Dark2")
# Visualize Tractus Results
library(ggplot2)
TractusResults <- read.table(file = 'output_file_experiment.tsv', sep = '\t', header = TRUE)
TractusResults$Expression.Level <- as.factor(TractusResults$Expression.Level)
TractusResults$Predicted.Expression.Level <- as.factor(TractusResults$Predicted.Expression.Level)
# Set the plot mode to "jitter" - more aesthetically pleasing, less clear
p <- ggplot(TractusResults, aes(x=Expression.Level, y=Expression.Value, color=Predicted.Expression.Level)) +
geom_jitter(position=position_jitter(0.2))
# Set the plot mode to "dodge" - clear
#p <- ggplot(TractusResults, aes(x=Expression.Level, y=Expression.Value, color=Predicted.Expression.Level)) +
#    geom_jitter(position=position_dodge(0.8))
# Change the color scheme
p + scale_color_brewer(palette="Dark2")
# Visualize Tractus Results
library(ggplot2)
TractusResults <- read.table(file = 'output_file.tsv', sep = '\t', header = TRUE)
TractusResults$Expression.Level <- as.factor(TractusResults$Expression.Level)
TractusResults$Predicted.Expression.Level <- as.factor(TractusResults$Predicted.Expression.Level)
# Set the plot mode to "jitter" - more aesthetically pleasing, less clear
p <- ggplot(TractusResults, aes(x=Expression.Level, y=Expression.Value, color=Predicted.Expression.Level)) +
geom_jitter(position=position_jitter(0.2))
# Set the plot mode to "dodge" - clear
#p <- ggplot(TractusResults, aes(x=Expression.Level, y=Expression.Value, color=Predicted.Expression.Level)) +
#    geom_jitter(position=position_dodge(0.8))
# Change the color scheme
p + scale_color_brewer(palette="Dark2")
